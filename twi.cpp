/********************************************************************************/
/*	twi class																	*/
/*																				*/
/*　本ファイルは Grove Beginner Kit にてI2C通信を行うためのtwi class のメソッド		*/
/*  を定義したものである．本クラスでは，マスタからスレーブへのデータ送信のみ対応		*/
/*	している．																	*/
/*																				*/
/*	■メソッド一覧																	*/
/*		I2C通信開始			：void	twiStart( void)								*/
/*		I2Cデータ送信		：void	twiSend(UCHR twi_data)						*/
/*																				*/
/*	■制約事項																	*/
/*　		・Atmega328 CPUのSCL及びSDA端子にI2Cデバイスが接続されているものとする．		*/
/*		・ライセンスはGPLに準じるものとする．										*/
/*																				*/
/********************************************************************************/
/*	変更履歴																		*/
/*　識別子	日付			氏名					変更内容								*/
/*　#000		2021.07.26	荒金 匡徳			初版リリース							*/
/********************************************************************************/
#include "twi.h"

/****************************************************************************/
/*　コンストラクタ			：twi( UCHR slave_address)						*/
/*																			*/
/*　機能：		twi I/F の初期設定を行う										*/
/*																			*/
/*	引数：		UCHR slave_address	：スレーブデバイスのアドレス				*/
/*																			*/
/*	戻り値：		なし															*/
/****************************************************************************/
twi::twi( UCHR slaveAddress){
	/* 転送周波数設定					　						分周比：1/1分周
														転送周波数：16MHz/(16 + 2*12/1) = 400KHz		*/
	this->slaveAddress = slaveAddress;					/* スレーブデバイスアドレスを保存				*/
	TWBR = 12;											/* カウント値：12								*/
	TWSR = 0x00;										/* 分周比：1/1分周							*/
	TWCR = 1<< TWEN;
}

/****************************************************************************/
/*　I2C通信開始			：void	twiStart( void)								*/
/*																			*/
/*　機能：		twi 通信を開始状態にする										*/
/*																			*/
/*	引数：		なし															*/
/*																			*/
/*	戻り値：		なし															*/
/****************************************************************************/
void twi::twiStart( void){								/* I2C通信開始(start 状態/スレーブアドレス/RW)	*/
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);			/* start 状態送信							*/
	while( !( TWCR & (1<<TWINT) ) );					/* Start 状態送信完了待ち						*/
	if( (TWSR & 0xF8 ) != START ){						/* Start 状態にならない時						*/
		twiError(2);									/* エラー処理								*/
	}
	TWDR=this->slaveAddress;							/* TWDRにslave address + Write を書き込み		*/
	TWCR = ( 1<<TWINT )| ( 1<<TWEN ) | ( 1<<TWEA);		/* TWINTを解除								*/
	while(  ! ( TWCR & ( 1<<TWINT ) ) );				/* TWINTが1になるまで待機						*/
	if((TWSR & 0xF8 ) != MT_SLA_ACK){					/* ACKが来ない時								*/
		twiError(3);									/* エラー処理								*/
	}
}

/****************************************************************************/
/*　I2Cデータ送信		：void	twiSend(UCHR twi_data)							*/
/*																			*/
/*　機能：		データを 1Byte 送信する										*/
/*				複数 Byte のデータを送信する場合は，本メソッドを複数回呼び出す．	*/
/*																			*/
/*	引数：		UCHR twi_data		：送信データ								*/
/*																			*/
/*	戻り値：		なし															*/
/****************************************************************************/
void twi::twiSend(UCHR twi_data){						/* データ1バイト送信							*/
	TWDR = twi_data;									/* TWDRに送信データを書き込み					*/
//	TWCR = ( 1<<TWINT )| ( 1<<TWEN );					/* TWINTを解除								*/
	TWCR = ( 1<<TWINT )| ( 1<<TWEN ) | ( 1<<TWEA);		/* TWINTを解除								*/
	while(  ! ( TWCR & ( 1<<TWINT ) ) );				/* TWINTが1になるまで待機						*/
	if(  ( TWSR & 0xF8 ) != MT_DATA_ACK ){				/* ACKが来ないとき							*/
		twiError(1);									/* エラー処理								*/
	}
}

void twi::twiStop(void){								/* I2C通信終了								*/
	TWCR = ( 1<<TWINT )| ( 1<<TWSTO )| ( 1<<TWEN );		/* I2C停止条件許可設定						*/
}

/****************************************************************************/
/*	※本関数は未検証につき，当面使用しないこと									*/
/*　I2Cデータ受信		：UCHR	twiRcv(UCHR *data, UCHR length)					*/
/*																			*/
/*　機能：		スレーブデバイスより指定 Byte 数のデータを受信する				*/
/*				複数 Byte のデータを送信する場合は，本メソッドを複数回呼び出す．	*/
/*																			*/
/*	引数：		UCHR *data			：受信データを格納するメモリのアドレス		*/
/*				UCHR length			：受信するデータの数（Byte 数）			*/
/*																			*/
/*	戻り値：		UCHR				：0:受信失敗　1:受信成功					*/
/****************************************************************************/
UCHR twi::twiRcv(UCHR *data, UCHR length){
	UCHR state[2] = {0x50, 0x58};						/* I2C slave のリターンコード					*/
	UCHR ack_cd[2] = {(1 << TWINT) | (1 << TWEA) | (1 << TWEN),(1 << TWINT) | (1 << TWEN)};/* ACK有無	*/
	UCHR	ret = 1;									/* 戻り値（0:失敗/1:成功）					*/
	for(; length > 0; length--, data++){				/* 指定のバイト数だけ繰り返す					*/
		TWCR = ack_cd[length==1];						/* データ受信開始(最後のデータかどうかで値変更	*/
		while( !(TWCR & (1 << TWINT)) );				/* データの受信待ち							*/
		if((TWSR & 0xF8) != state[length==1]) {			/* 受信成功かチェック							*/
			ret = 0;									/* 失敗なら戻り値を失敗に設定し処理を抜ける		*/
			break;
		}
		*data = TWDR;									/* 受信データの保存							*/
	}
	return ret;
}

void twi::twiError(int cd){
	while(1){
		/*	twiエラーの時の処理（例えばLEDの点滅等）の処理を入れる										*/
	}
}
